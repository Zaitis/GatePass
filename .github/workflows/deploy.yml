name: Deploy GatePass to Hetzner

on:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        chmod +x ./mvnw
        ./mvnw clean package -Pproduction -DskipTests --batch-mode --update-snapshots
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: gatepass-jar
        path: target/*.jar
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code (for deployment configs)
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: gatepass-jar
        path: ./target

    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Deploy to server
      run: |
        # Configuration
        REMOTE_HOST="${{ secrets.HETZNER_HOST }}"
        REMOTE_USER="${{ secrets.HETZNER_USER }}"
        REMOTE_PASS="${{ secrets.HETZNER_PASSWORD }}"
        SERVICE_NAME="gatepass"
        DEPLOY_PATH="/var/www/parking"
        
        # Function to execute commands with retry
        ssh_retry() {
          local max_attempts=3
          local delay=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            if sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$REMOTE_USER@$REMOTE_HOST" "$@"; then
              return 0
            else
              echo "SSH attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "All SSH attempts failed!"
          return 1
        }
        
        # Function to copy files with retry
        scp_retry() {
          local max_attempts=3
          local delay=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Copy attempt $attempt of $max_attempts..."
            if sshpass -p "$REMOTE_PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$@"; then
              return 0
            else
              echo "Copy attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "All copy attempts failed!"
          return 1
        }

    - name: Stop service and backup
      run: |
        REMOTE_HOST="${{ secrets.HETZNER_HOST }}"
        REMOTE_USER="${{ secrets.HETZNER_USER }}"
        REMOTE_PASS="${{ secrets.HETZNER_PASSWORD }}"
        SERVICE_NAME="gatepass"
        
        # Function to execute commands with retry
        ssh_retry() {
          local max_attempts=3
          local delay=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            if sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$REMOTE_USER@$REMOTE_HOST" "$@"; then
              return 0
            else
              echo "SSH attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "All SSH attempts failed!"
          return 1
        }
        
        ssh_retry '
          set -e
          echo "=== Stopping service and creating backup ==="
          
          SUDOPASS="deploy123"
          SERVICE_NAME="gatepass"
          DATE=$(date +%Y%m%d_%H%M%S)
          
          sudo_cmd() {
            echo "$SUDOPASS" | sudo -S "$@"
          }
          
          # Stop service
          echo "Stopping service..."
          sudo_cmd systemctl stop $SERVICE_NAME 2>/dev/null || echo "Service was not running"
          
          # Create backup
          echo "Creating backup..."
          sudo_cmd mkdir -p /var/backups/parking
          if [ -f /var/lib/gatepass/gatepass.jar ]; then
            sudo_cmd cp /var/lib/gatepass/gatepass.jar /var/backups/parking/gatepass-backup-$DATE.jar
            echo "Backup created: gatepass-backup-$DATE.jar"
          fi
          
          # Prepare directories
          sudo_cmd mkdir -p /var/lib/gatepass /var/log/gatepass
          sudo_cmd chown -R $USER:$USER /var/lib/gatepass /var/log/gatepass
        '

    - name: Transfer JAR file
      run: |
        REMOTE_HOST="${{ secrets.HETZNER_HOST }}"
        REMOTE_USER="${{ secrets.HETZNER_USER }}"
        REMOTE_PASS="${{ secrets.HETZNER_PASSWORD }}"
        
        # Validate JAR file exists
        if [ ! -f target/*.jar ]; then
          echo "❌ Error: JAR file not found in target directory"
          ls -la target/
          exit 1
        fi
        
        # Get the exact JAR file name
        JAR_FILE=$(ls target/*.jar | head -1)
        echo "Found JAR file: $JAR_FILE"
        
        # Validate JAR file is not empty
        if [ ! -s "$JAR_FILE" ]; then
          echo "❌ Error: JAR file is empty"
          ls -la "$JAR_FILE"
          exit 1
        fi
        
        # Function to copy files with retry
        scp_retry() {
          local max_attempts=3
          local delay=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Copy attempt $attempt of $max_attempts..."
            if sshpass -p "$REMOTE_PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -v "$@"; then
              echo "✅ File transfer successful"
              return 0
            else
              echo "Copy attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "❌ All copy attempts failed!"
          return 1
        }
        
        echo "Transferring JAR file: $JAR_FILE"
        scp_retry "$JAR_FILE" "$REMOTE_USER@$REMOTE_HOST:/tmp/gatepass.jar"
        
        # Verify the transfer was successful
        echo "Verifying file transfer..."
        sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no "$REMOTE_USER@$REMOTE_HOST" "ls -la /tmp/gatepass.jar"

    - name: Deploy JAR and configure service
      run: |
        REMOTE_HOST="${{ secrets.HETZNER_HOST }}"
        REMOTE_USER="${{ secrets.HETZNER_USER }}"
        REMOTE_PASS="${{ secrets.HETZNER_PASSWORD }}"
        
        # Function to execute commands with retry
        ssh_retry() {
          local max_attempts=3
          local delay=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            if sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$REMOTE_USER@$REMOTE_HOST" "$@"; then
              return 0
            else
              echo "SSH attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "All SSH attempts failed!"
          return 1
        }
        
        ssh_retry '
          set -e
          echo "=== Deploying JAR and configuring service ==="
          
          SUDOPASS="deploy123"
          SERVICE_NAME="gatepass"
          
          sudo_cmd() {
            echo "$SUDOPASS" | sudo -S "$@"
          }
          
          # Verify JAR file exists
          if [ ! -f /tmp/gatepass.jar ]; then
            echo "❌ Error: JAR file not found in /tmp/"
            ls -la /tmp/
            exit 1
          fi
          
          # Move JAR to final location
          echo "Installing JAR file..."
          sudo_cmd mv /tmp/gatepass.jar /var/lib/gatepass/gatepass.jar
          sudo_cmd chmod 644 /var/lib/gatepass/gatepass.jar
          
          # Verify JAR was moved successfully
          if [ ! -f /var/lib/gatepass/gatepass.jar ]; then
            echo "❌ Error: JAR file was not moved successfully"
            exit 1
          fi
          
          # Detect Java installation
          echo "Detecting Java installation..."
          if [ -d "/usr/lib/jvm/java-21-openjdk-amd64" ]; then
              JAVA_HOME="/usr/lib/jvm/java-21-openjdk-amd64"
          elif [ -d "/usr/lib/jvm/default-java" ]; then
              JAVA_HOME="/usr/lib/jvm/default-java"
          else
              echo "Java not found! Using default path"
              JAVA_HOME="/usr/lib/jvm/default-java"
          fi
          
          echo "JAVA_HOME: $JAVA_HOME"
          
                                # Create service file directly
          echo "Creating systemd service..."
          sudo_cmd rm -f /etc/systemd/system/$SERVICE_NAME.service
          
          # Write service file line by line
          echo "[Unit]" | sudo_cmd tee /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Description=GatePass Spring Boot Application" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "After=network.target" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "[Service]" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Type=simple" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "User=deploy" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Group=deploy" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "WorkingDirectory=/var/lib/gatepass" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "ExecStart=/usr/bin/java -jar /var/lib/gatepass/gatepass.jar --spring.profiles.active=production --server.port=8081" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Restart=always" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "RestartSec=10" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "StandardOutput=journal" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "StandardError=journal" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Environment=JAVA_HOME=$JAVA_HOME" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Environment=DATABASE_URL=${{ secrets.DATABASE_URL }}" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Environment=DATABASE_USER=${{ secrets.DATABASE_USER }}" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Environment=DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "Environment=JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "NoNewPrivileges=true" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "PrivateTmp=true" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "ProtectSystem=strict" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "ReadWritePaths=/var/lib/gatepass" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "ReadWritePaths=/var/log/gatepass" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "[Install]" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          echo "WantedBy=multi-user.target" | sudo_cmd tee -a /etc/systemd/system/$SERVICE_NAME.service > /dev/null
          
          sudo_cmd chmod 644 /etc/systemd/system/$SERVICE_NAME.service
          
          # Verify service file was created
          if [ ! -f /etc/systemd/system/$SERVICE_NAME.service ]; then
            echo "❌ Error: Service file was not created"
            exit 1
          fi
          
          # Show service file content for debugging
          echo "Service file content:"
          sudo_cmd cat /etc/systemd/system/$SERVICE_NAME.service
           
           # Enable and start service
          echo "Starting service..."
          sudo_cmd systemctl daemon-reload
          sudo_cmd systemctl enable $SERVICE_NAME
          sudo_cmd systemctl start $SERVICE_NAME
          
          echo "✅ Service configured and started!"
        '

    - name: Verify deployment
      run: |
        REMOTE_HOST="${{ secrets.HETZNER_HOST }}"
        REMOTE_USER="${{ secrets.HETZNER_USER }}"
        REMOTE_PASS="${{ secrets.HETZNER_PASSWORD }}"
        
        # Function to execute commands with retry
        ssh_retry() {
          local max_attempts=3
          local delay=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            if sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$REMOTE_USER@$REMOTE_HOST" "$@"; then
              return 0
            else
              echo "SSH attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "All SSH attempts failed!"
          return 1
        }
        
        ssh_retry '
          set -e
          echo "=== Verifying deployment ==="
          
          SUDOPASS="deploy123"
          SERVICE_NAME="gatepass"
          
          sudo_cmd() {
            echo "$SUDOPASS" | sudo -S "$@"
          }
          
          # Wait for service to start
          echo "Waiting for service to start..."
          sleep 20
          
          # Check service status
          echo "Checking service status..."
          sudo_cmd systemctl status $SERVICE_NAME --no-pager -l || echo "Service status check completed"
          
          # Check if application is responding
          echo "Checking application health..."
          for i in {1..10}; do
              if curl -s http://localhost:8081 > /dev/null; then
                  echo "✅ Application is responding!"
                  exit 0
              else
                  echo "Waiting for application to start... ($i/10)"
                  sleep 5
              fi
          done
          
          echo "⚠️  Application health check completed with warnings"
          echo "📊 Check logs: sudo journalctl -u gatepass -f"
        '

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "🌐 GatePass is available at: http://parking.zaitis.dev"
        else
          echo "❌ Deployment failed!"
          echo "Check the logs above for details."
        fi 