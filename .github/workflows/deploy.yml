name: Deploy GatePass to Hetzner

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Deploy GatePass on server
      run: |
        sshpass -p "${{ secrets.HETZNER_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} '
        set -e
        
        # Add debugging
        echo "=== Starting GatePass Deployment ==="
        echo "Current user: $(whoami)"
        echo "Current directory: $(pwd)"
        echo "Date: $(date)"
        
        # Configuration
        DEPLOY_PATH="/var/www/parking"
        BACKUP_DIR="/var/backups/parking"
        DATE=$(date +%Y%m%d_%H%M%S)
        REPO_URL="https://${{ secrets.GH_TOKEN }}@github.com/Zaitis/GatePass.git"
        BRANCH="master"
        SUDOPASS="deploy123"
        SERVICE_NAME="gatepass"
        
        sudo_cmd() {
          echo "$SUDOPASS" | sudo -S "$@"
        }
        
        # Create directories
        sudo_cmd mkdir -p "$BACKUP_DIR"
        
        # Handle repository
        if [ -d "$DEPLOY_PATH/.git" ]; then
            echo "Creating backup..."
            sudo_cmd tar -czf "$BACKUP_DIR/backup_$DATE.tar.gz" -C "$DEPLOY_PATH" .
            sudo_cmd chown -R $USER:$USER "$DEPLOY_PATH"
            cd "$DEPLOY_PATH"
            git fetch origin
            git reset --hard origin/$BRANCH
        else
            sudo_cmd rm -rf "$DEPLOY_PATH"
            sudo_cmd mkdir -p "$DEPLOY_PATH"
            sudo_cmd chown -R $USER:$USER "$DEPLOY_PATH"
            git clone -b "$BRANCH" "$REPO_URL" "$DEPLOY_PATH"
        fi
        
        # Stop service if running (ignore if not exists)
        echo "Stopping service if running..."
        sudo_cmd systemctl stop $SERVICE_NAME 2>/dev/null || echo "Service was not running"
        
        # Build application
        cd "$DEPLOY_PATH"
        sudo_cmd chown -R $USER:$USER "$DEPLOY_PATH"
        
        # Fix Maven wrapper permissions
        echo "Setting Maven wrapper permissions..."
        chmod +x ./mvnw
        
        # Set Java environment (auto-detect Java installation)
        echo "Detecting Java installation..."
        
        # Try multiple methods to detect Java
        if [ -d "/usr/lib/jvm/java-21-openjdk-amd64" ]; then
            export JAVA_HOME="/usr/lib/jvm/java-21-openjdk-amd64"
        elif [ -d "/usr/lib/jvm/default-java" ]; then
            export JAVA_HOME="/usr/lib/jvm/default-java"
        elif command -v java >/dev/null 2>&1; then
            # Try to auto-detect from java command
            JAVA_PATH=$(which java)
            if [ -L "$JAVA_PATH" ]; then
                JAVA_REAL_PATH=$(readlink -f "$JAVA_PATH" 2>/dev/null || echo "$JAVA_PATH")
                export JAVA_HOME=$(dirname $(dirname "$JAVA_REAL_PATH"))
            else
                export JAVA_HOME=$(dirname $(dirname "$JAVA_PATH"))
            fi
        else
            echo "Java not found! Please install Java 21"
            exit 1
        fi
        
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Verify Java installation
        echo "Java version:"
        java -version || (echo "Java verification failed!" && exit 1)
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Java executable: $(which java)"
        
        # Clean and build
        echo "Building application..."
        ./mvnw clean package -Pproduction -DskipTests
        
        # Setup application directories
        sudo_cmd mkdir -p /var/log/gatepass /var/lib/gatepass
        sudo_cmd chown -R $USER:$USER /var/log/gatepass /var/lib/gatepass
        
        # Copy JAR file
        echo "Copying JAR file..."
        sudo_cmd cp target/*.jar /var/lib/gatepass/gatepass.jar
        
        # Create systemd service file
        echo "Creating systemd service..."
        sudo_cmd rm -f /etc/systemd/system/$SERVICE_NAME.service
        
        # Copy and customize service file from deployment directory
        cp deployment/gatepass.service /tmp/gatepass.service
        
        # Update service file with correct environment variables
        sed -i "s|Environment=DATABASE_URL=.*|Environment=DATABASE_URL=${{ secrets.DATABASE_URL }}|" /tmp/gatepass.service
        sed -i "s|Environment=DATABASE_USER=.*|Environment=DATABASE_USER=${{ secrets.DATABASE_USER }}|" /tmp/gatepass.service
        sed -i "s|Environment=DATABASE_PASSWORD=.*|Environment=DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}|" /tmp/gatepass.service
        sed -i "s|Environment=JAVA_HOME=.*|Environment=JAVA_HOME=$JAVA_HOME|" /tmp/gatepass.service
        
        # Copy to systemd directory
        sudo_cmd cp /tmp/gatepass.service /etc/systemd/system/$SERVICE_NAME.service
        sudo_cmd chmod 644 /etc/systemd/system/$SERVICE_NAME.service
        
        # Reload systemd and start service
        echo "Starting service..."
        sudo_cmd systemctl daemon-reload
        sudo_cmd systemctl enable $SERVICE_NAME
        sudo_cmd systemctl start $SERVICE_NAME
        
        # Wait for service to start
        echo "Waiting for service to start..."
        sleep 15
        
        # Check service status
        echo "Checking service status..."
        sudo_cmd systemctl status $SERVICE_NAME --no-pager -l || echo "Service status check failed"
        
        # Check if application is responding
        echo "Checking application health..."
        for i in {1..10}; do
            if curl -s http://localhost:8081 > /dev/null; then
                echo "Application is responding!"
                break
            else
                echo "Waiting for application to start... ($i/10)"
                sleep 5
            fi
        done
        
        # Configure nginx
        if [ ! -f /etc/nginx/sites-available/parking.zaitis.dev ]; then
            echo "Configuring Nginx..."
            sudo_cmd rm -f /etc/nginx/sites-available/parking.zaitis.dev
            echo "server {" | sudo_cmd tee /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    listen 80;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    server_name parking.zaitis.dev;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    client_max_body_size 50M;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    client_body_timeout 300s;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    client_header_timeout 300s;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    location / {" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_pass http://localhost:8081;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_set_header Host \$host;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_set_header X-Real-IP \$remote_addr;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_set_header X-Forwarded-Proto \$scheme;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_connect_timeout 300s;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_send_timeout 300s;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "        proxy_read_timeout 300s;" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "    }" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            echo "}" | sudo_cmd tee -a /etc/nginx/sites-available/parking.zaitis.dev > /dev/null
            
            sudo_cmd ln -sf /etc/nginx/sites-available/parking.zaitis.dev /etc/nginx/sites-enabled/
            sudo_cmd nginx -t && sudo_cmd systemctl reload nginx
        fi
        
        echo "✅ Deployment completed successfully!"
        echo "🌐 Application should be available at: http://parking.zaitis.dev"
        echo "📊 Service logs: sudo journalctl -u gatepass -f"
        '

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "🌐 GatePass is available at: http://parking.zaitis.dev"
        else
          echo "❌ Deployment failed!"
        fi 